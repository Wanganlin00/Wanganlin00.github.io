---
  knitr:
  opts_chunk:
  comment: "#>"
collapse: true
---
  
  # base R {.unnumbered}
  
  # 最重要的是帮助文档
  
  The Comprehensive R Archive Network [CRAN](https://cran.r-project.org/)

```{r eval=FALSE}
help.start()
help()
?c
```

# 包的安装和使用

```{r eval=FALSE}
installed.packages()
install.packages("ggplot2") 
library(ggplot2) # 载入包
require(ggplot2) # 另一种载入方式
help(package = "ggplot2") # R包ggplot2的帮助文档
?ggplot2
data(package="ggplot2")   #查看R包ggplot2中的数据集

data(mpg,package="ggplot2")  #加载数据集
help(mpg) # 数据集mpg的帮助文档
?mpg
mpg
```

# 变量类型

**数据类型（mode）**：表示对象在计算机内存中的存储类型

-   **numeric -- 数值型（Integer/double）integer -- 整型 L**
  
  ```{r}
mode(4.3)
class(4.3)
mode(1L)
class(1L)
```

-   **character -- 字符型**
  
  ```{r}
mode(c("car"))
class("car")
```

-   **logical --逻辑型**
  
  ```{r}
mode(c(TRUE,FALSE))
class(c(TRUE,FALSE))
```

-   **factor--因子**
  
  ```{r}
mode(factor((c(1,2,3)))) 
class(factor((c(1,2,3)))) 
```

-   **date/datetime--日期/日期时间**
  
  默认格式：`"%Y-%m-%d" xxxx-xx-xx,例如：2023-03-15`

```{r}
mode(as.Date("2023-12-11"))
class(as.Date("2023-12-11")) 

Sys.Date()
as.Date(c("02 14-2002","01 04-2013"),"%m %d-%Y") #以"%m %d-%Y"格式读入
format(Sys.Date(),"%Y/%m/%d") #以"%Y/%m/%d"格式输出
```

-   **function--函数**
  
  ```{r}
mode(c)
class(c)
```

-   **list--列表**
  
  ```{r}
mode(mpg)
class(mpg)
```

-   **complex -- 复数型**
  
  ```{r}

mode(c(1+2i,3-4i)) 
class(c(1+2i,3-4i))
```

-   **raw--原始型**
  
  ```{r}
charToRaw("abcde12345") #字符串中每个字符的原始存储格式（十六进制？）
mode(charToRaw("abcde12345")) 
class(charToRaw("abcde12345"))
```

# 数据结构

**数据结构(class)**：是一种基于*面向对象*的R的抽象类型划分,或者理解为一种数据结构。

-   **vector --向量**，同一类元素的集合。

`?c      #Combine Values into a Vector or List`

```{r}
#单元素向量
1

is.vector(1)

"a"
is.vector("a")

#使用函数c()创建向量

c(1)
c(1,2,3,4,5)
c("a","b","c")
```

-   **factor --因子**，分类变量，其中每个级别都是一类。

`?factor`

`factor(vector,order=FALSE,levels=c(v1,v2,…),labels= ,...)` ，在内存中以整数`c(1,2,3,...,k)`形式存储。

```{r}
#类别（名义型）变量
diabetes<-c("t1","t2","t1","t1") 
str(diabetes)
diabetes<-factor(diabetes)
str(diabetes)


#有序型变量     默认水平根据字母顺序而定
status<-c("poor","better","best","poor")
status<-factor(status,order=TRUE) 
str(status) 
status<-factor(status,order=TRUE,levels = c("poor","better","best")) 
str(status) 

#改变外在标签
sex<-c(1,2,2,1)
sex
sex<-factor(sex,levels=c(1,2),labels = c("男","女")) 
str(sex) 
sex
```

-   **matrix --矩阵**，所有元素必须是同一类型。

`?matrix`

`matrix(data= ,nrow=1 ,ncol=1 ,byrow=FALSE ,dimnames=list(rnames,cnames) ,...)`

```{r}
num<-c(16,22,24,28)
rnames<-c("R1","R2")
cnames<-c("C1","C2")
mymatrix<-matrix(num,nrow=2,ncol=2,byrow=TRUE,dimnames=list(rnames,cnames))
mymatrix   
```

-   **array--数组**，所有元素必须是同一类型。

`?array`

`array(data,dim_numeric_vector,dimnames = list(dim1,dim2,...),...)`

```{r}
v<-1:24 
dim1<-c("A1","A2","A3") 
dim2<-c("B1","B2","B3","B4")
dim3<-c("C1","C2") 
myarray<-array(v,c(3,4,2),dimnames = list(dim1,dim2,dim3)) 
myarray
```

-   **data.frame/tibble-- 数据框**， 由列向量组成，每一列元素必须是同一类型，列与列之间长度必须相同，但类型可以不同。

`?data.frame`

`data.frame(name1=col1,name2=col2,...,row.names = ,...)`

`?tibble`，`tibble()`是tidyverse风格的数据框，用法类似。

```{r}
id<-c(1,2,3,4) 
age<-c(21,14,52,15) 
diabetes<-c("t1","t2","t1","t1") 
status<-c("poor","better","best","poor") 
patient<-data.frame(patientID=id,age,diabetes,status,row.names = id) # 4个列向量组成数据框 
patient
```

list --列表，由以上各种数据结构组成

`?list`

`list(name1=object1,name2=object2,...)`

```{r}
mylist<-list(title="My list",
             matr=matrix(c("a1","b1","a2","b2"),nrow=2,ncol=2,byrow=TRUE,
                         dimnames = list(c("X1","X2"),c("Y1","Y2"))
             ),
             df=data.frame(id=matrix(c("Lisa","BOb","John","Jule"),
                                     nrow=4,ncol=1,byrow=TRUE
             ),
             int=c(3,5,7,9),
             TF=c(T,T,T,F)
             ),
             list=list(a=c(1,2,3),b=c("A","B"))
)
mylist
```

# qmd_format

|                                                            |                                                         |
  |-------------------------|-----------------------------------------------|
  | 输出                                                       | 语法                                                    |
  | `code`                                                     | \``code`\`                                              |
  | **粗体**                                                   | `**粗体**`                                              |
  | *斜体*                                                     | `*斜体*`                                                |
  | [下横线]{.underline}                                       | `[下横线]{.underline}`                                  |
  | ~~删除线~~                                                 | `~~删除线~~`                                            |
  | 上标X^2^                                                   | `X^2^`                                                  |
  | 下标 X~1~                                                  | `X~1~`                                                  |
  | [SAMALL small caps]{.smallcaps}                            | 与小写字母同等高度的大写字母 `[small caps]{.smallcaps}` |
  | <https://r4ds.hadley.nz/>                                  | `<https://r4ds.hadley.nz/>`                             |
  | [quarto](https://quarto.org)                               | `[quarto](https://quarto.org)`                          |
  | ![data science](images/whole-game.png){alt="data science"} | `![data science](images/whole-game.png)`                |
  